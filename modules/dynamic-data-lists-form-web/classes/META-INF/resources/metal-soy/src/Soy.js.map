{"version":3,"sources":["Soy.js"],"names":["ijData","Soy","component","elementTemplate","constructor","TEMPLATE","getOriginalFn","soyParamTypes_","types","keys","params","configs","i","length","data","mixin","getConfig","getStateKeys","forEach","value","key","isHtmlParam_","soyRenderer_","toIncDom","bind","prepareStateForRender","namespace","templateName","opt_data","opt_ignored","opt_ijData","goog","loadedModules_","Error","originalFn","args","componentCtor","push","IncrementalDOM","elementVoid","apply","name","state","getDataManager","getStateInstance","getStateKeyConfig","isHtml","type","split","indexOf","templates","mainTemplate","RENDERER","registerForInterception","register","render","startInterception","handleInterceptedCall_","buildTemplateData_","stopInterception","changes","should","shouldUpdate","fn","props","incDomFn","element","document","createElement","patch","innerHTML","content","contentKind","buildFn","RENDERER_NAME","Config","SoyAop","validators"],"mappings":"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","file":"Soy.js","sourcesContent":["'use strict';\n\nimport 'metal-soy-bundle';\nimport { ComponentRegistry } from 'metal-component';\nimport { isFunction, isObject, isString, object } from 'metal';\nimport { validators, Config } from 'metal-state';\nimport HTML2IncDom from 'html2incdom';\nimport IncrementalDomRenderer from 'metal-incremental-dom';\nimport SoyAop from './SoyAop';\n\n// The injected data that will be passed to soy templates.\nlet ijData = {};\n\nclass Soy extends IncrementalDomRenderer.constructor {\n\t/**\n\t * Adds the template params to the component's state, if they don't exist yet.\n\t * @param {!Component} component\n\t * @return {Object}\n\t */\n\tgetExtraDataConfig(component) {\n\t\tlet elementTemplate = component.constructor.TEMPLATE;\n\t\tif (!isFunction(elementTemplate)) {\n\t\t\treturn;\n\t\t}\n\n\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\tthis.soyParamTypes_ = elementTemplate.types || {};\n\n\t\tconst keys = elementTemplate.params || [];\n\t\tconst configs = {};\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (!component[keys[i]]) {\n\t\t\t\tconfigs[keys[i]] = {};\n\t\t\t}\n\t\t}\n\t\treturn configs;\n\t}\n\n\t/**\n\t * Copies the component's state to an object so it can be passed as it's\n\t * template call's data. The copying needs to be done because, if the component\n\t * itself is passed directly, some problems occur when soy tries to merge it\n\t * with other data, due to property getters and setters. This is safer.\n\t * Also calls the component's \"prepareStateForRender\" to let it change the\n\t * data passed to the template.\n\t * @param {!Component} component\n\t * @param {!Array<string>} params The params used by this template.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildTemplateData_(component, params) {\n\t\tconst data = object.mixin({}, this.getConfig(component));\n\t\tcomponent.getStateKeys().forEach(key => {\n\t\t\tlet value = component[key];\n\t\t\tif (this.isHtmlParam_(component, key)) {\n\t\t\t\tvalue = soyRenderer_.toIncDom(value);\n\t\t\t}\n\t\t\tdata[key] = value;\n\t\t});\n\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (!data[params[i]] && isFunction(component[params[i]])) {\n\t\t\t\tdata[params[i]] = component[params[i]].bind(component);\n\t\t\t}\n\t\t}\n\n\t\tif (isFunction(component.prepareStateForRender)) {\n\t\t\treturn component.prepareStateForRender(data) || data;\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the requested template function. This function will be wrapped in\n\t * another though, just to defer the requirement of the template's module\n\t * being ready until the function is actually called.\n\t * @param {string} namespace The soy template's namespace.\n\t * @param {string} templateName The name of the template function.\n\t * @return {!function()}\n\t */\n\tgetTemplate(namespace, templateName) {\n\t\treturn function(opt_data, opt_ignored, opt_ijData) {\n\t\t\tif (!goog.loadedModules_[namespace]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No template with namespace \"${namespace}\" has been loaded yet.`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn goog.loadedModules_[namespace][templateName](opt_data, opt_ignored, opt_ijData);\n\t\t};\n\t}\n\n\t/**\n\t * Handles an intercepted soy template call. If the call is for a component's\n\t * main template, then it will be replaced with a call that incremental dom\n\t * can use for both handling an instance of that component and rendering it.\n\t * @param {!function()} originalFn The original template function that was\n\t *     intercepted.\n\t * @param {Object} data The data the template was called with.\n\t * @protected\n\t */\n\thandleInterceptedCall_(originalFn, opt_data = {}) {\n\t\tconst args = [originalFn.componentCtor, null, []];\n\t\tfor (let key in opt_data) {\n\t\t\targs.push(key, opt_data[key]);\n\t\t}\n\t\tIncrementalDOM.elementVoid.apply(null, args);\n\t}\n\n\t/**\n\t * Checks if the given param type is html.\n\t * @param {!Component} component\n\t * @param {string} name\n\t * @protected\n\t */\n\tisHtmlParam_(component, name) {\n\t\tconst state = component.getDataManager().getStateInstance(component);\n\t\tif (state.getStateKeyConfig(name).isHtml) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst elementTemplate = SoyAop.getOriginalFn(component.constructor.TEMPLATE);\n\t\tconst type = (elementTemplate.types || {})[name] || '';\n\t\treturn type.split('|').indexOf('html') !== -1;\n\t}\n\n\t/**\n\t * Registers the given templates to be used by `Soy` for the specified\n\t * component constructor.\n\t * @param {!Function} componentCtor The constructor of the component that\n\t *     should use the given templates.\n\t * @param {!Object} templates Object containing soy template functions.\n\t * @param {string=} mainTemplate The name of the main template that should be\n\t *     used to render the component. Defaults to \"render\".\n\t */\n\tregister(componentCtor, templates, mainTemplate = 'render') {\n\t\tcomponentCtor.RENDERER = soyRenderer_;\n\t\tcomponentCtor.TEMPLATE = SoyAop.getOriginalFn(templates[mainTemplate]);\n\t\tcomponentCtor.TEMPLATE.componentCtor = componentCtor;\n\t\tSoyAop.registerForInterception(templates, mainTemplate);\n\t\tComponentRegistry.register(componentCtor);\n\t}\n\n\t/**\n\t * Overrides the default method from `IncrementalDomRenderer` so the component's\n\t * soy template can be used for rendering.\n\t * @param {!Component} component\n\t * @param {!Object} data Data passed to the component when rendering it.\n\t * @override\n\t */\n\trenderIncDom(component) {\n\t\tlet elementTemplate = component.constructor.TEMPLATE;\n\t\tif (isFunction(elementTemplate) && !component.render) {\n\t\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\t\tSoyAop.startInterception(this.handleInterceptedCall_);\n\t\t\tconst data = this.buildTemplateData_(component, elementTemplate.params || []);\n\t\t\telementTemplate(data, null, ijData);\n\t\t\tSoyAop.stopInterception();\n\t\t} else {\n\t\t\tsuper.renderIncDom(component);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the injected data object that should be passed to templates.\n\t * @param {Object} data\n\t */\n\tsetInjectedData(data) {\n\t\tijData = data || {};\n\t}\n\n\t/**\n\t * Overrides the original `IncrementalDomRenderer` method so that only\n\t * state keys used by the main template can cause updates.\n\t * @param {!Component} component\n\t * @param {Object} changes\n\t * @return {boolean}\n\t */\n\tshouldUpdate(component, changes) {\n\t\tconst should = super.shouldUpdate(component, changes);\n\t\tif (!should || component.shouldUpdate) {\n\t\t\treturn should;\n\t\t}\n\n\t\tconst fn = component.constructor.TEMPLATE;\n\t\tconst params = fn ? SoyAop.getOriginalFn(fn).params : [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (changes.props[params[i]]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts the given incremental dom function into an html string.\n\t * @param {!function()} incDomFn\n\t * @return {string}\n\t */\n\ttoHtmlString(incDomFn) {\n\t\tconst element = document.createElement('div');\n\t\tIncrementalDOM.patch(element, incDomFn);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Converts the given html string into an incremental dom function.\n\t * @param {string|{contentKind: string, content: string}} value\n\t * @return {!function()}\n\t */\n\ttoIncDom(value) {\n\t\tif (isObject(value) && isString(value.content) && (value.contentKind === 'HTML')) {\n\t\t\tvalue = value.content;\n\t\t}\n\t\tif (isString(value)) {\n\t\t\tvalue = HTML2IncDom.buildFn(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nconst soyRenderer_ = new Soy();\nsoyRenderer_.RENDERER_NAME = 'soy';\n\nexport default soyRenderer_;\nexport {\n\tConfig,\n\tsoyRenderer_ as Soy,\n\tSoyAop,\n\tvalidators\n};\n"]}