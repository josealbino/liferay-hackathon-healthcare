{"version":3,"sources":["sync.js"],"names":["syncState","SYNC_FNS_KEY","getSyncFns_","component","ctor","constructor","hasOwnProperty","fns","keys","getDataManager","getSyncKeys","canCache","i","length","name","charAt","toUpperCase","slice","fn","prototype","opt_changes","syncFns","Object","change","manager","call","newVal","get","prevVal","undefined"],"mappings":";AAAA;;;;;SA8CgBA,S,GAAAA,S;;;AA1ChB,KAAMC,eAAe,oBAArB;;AAEA;;;;;;;;;;AAUA,UAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC/B,MAAMC,OAAOD,UAAUE,WAAvB;AACA,MAAID,KAAKE,cAAL,CAAoBL,YAApB,CAAJ,EAAuC;AACtC,UAAOG,KAAKH,YAAL,CAAP;AACA;;AAED,MAAMM,MAAM,EAAZ;AACA,MAAMC,OAAOL,UAAUM,cAAV,GAA2BC,WAA3B,CAAuCP,SAAvC,CAAb;AACA,MAAIQ,WAAW,IAAf;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,KAAKK,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,OAAME,gBAAcN,KAAKI,CAAL,EAAQG,MAAR,CAAe,CAAf,EAAkBC,WAAlB,EAAd,GAAgDR,KAAKI,CAAL,EAAQK,KAAR,CAAc,CAAd,CAAtD;AACA,OAAMC,KAAKf,UAAUW,IAAV,CAAX;AACA,OAAII,EAAJ,EAAQ;AACPX,QAAIC,KAAKI,CAAL,CAAJ,IAAeM,EAAf;AACAP,eAAWA,YAAYR,UAAUE,WAAV,CAAsBc,SAAtB,CAAgCL,IAAhC,CAAvB;AACA;AACD;;AAED,MAAIH,QAAJ,EAAc;AACbP,QAAKH,YAAL,IAAqBM,GAArB;AACA;AACD,SAAOA,GAAP;AACA;;AAED;;;;;;AAMO,UAASP,SAAT,CAAmBG,SAAnB,EAA8BiB,WAA9B,EAA2C;AACjD,MAAMC,UAAUnB,YAAYC,SAAZ,CAAhB;AACA,MAAMK,OAAOc,OAAOd,IAAP,CAAYY,eAAeC,OAA3B,CAAb;AACA,OAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAIJ,KAAKK,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,OAAMM,KAAKG,QAAQb,KAAKI,CAAL,CAAR,CAAX;AACA,OAAI,uBAAWM,EAAX,CAAJ,EAAoB;AACnB,QAAMK,SAASH,eAAeA,YAAYZ,KAAKI,CAAL,CAAZ,CAA9B;AACA,QAAMY,UAAUrB,UAAUM,cAAV,EAAhB;AACAS,OAAGO,IAAH,CACCtB,SADD,EAECoB,SAASA,OAAOG,MAAhB,GAAyBF,QAAQG,GAAR,CAAYxB,SAAZ,EAAuBK,KAAKI,CAAL,CAAvB,CAF1B,EAGCW,SAASA,OAAOK,OAAhB,GAA0BC,SAH3B;AAKA;AACD;AACD","file":"sync.js","sourcesContent":["'use strict';\n\nimport { isFunction } from 'metal';\n\nconst SYNC_FNS_KEY = '__METAL_SYNC_FNS__';\n\n/**\n * Gets the `sync` methods for this component's state. Caches the results in\n * the component's constructor whenever possible, so that this doesn't need to\n * be calculated again. It's not possible to cache the results when at least\n * one sync method is defined in the instance itself instead of in its\n * prototype, as it may be bound to the instance (not reusable by others).\n * @param {!Component} component\n * @return {!Object}\n * @private\n */\nfunction getSyncFns_(component) {\n\tconst ctor = component.constructor;\n\tif (ctor.hasOwnProperty(SYNC_FNS_KEY)) {\n\t\treturn ctor[SYNC_FNS_KEY];\n\t}\n\n\tconst fns = {};\n\tconst keys = component.getDataManager().getSyncKeys(component);\n\tlet canCache = true;\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst name = `sync${keys[i].charAt(0).toUpperCase()}${keys[i].slice(1)}`;\n\t\tconst fn = component[name];\n\t\tif (fn) {\n\t\t\tfns[keys[i]] = fn;\n\t\t\tcanCache = canCache && component.constructor.prototype[name];\n\t\t}\n\t}\n\n\tif (canCache) {\n\t\tctor[SYNC_FNS_KEY] = fns;\n\t}\n\treturn fns;\n}\n\n/**\n * Calls \"sync\" functions for the given component's state.\n * @param {!Component} component\n * @param {Object=} opt_changes When given, only the properties inside it will\n *     be synced. Otherwise all state properties will be synced.\n */\nexport function syncState(component, opt_changes) {\n\tconst syncFns = getSyncFns_(component);\n\tconst keys = Object.keys(opt_changes || syncFns);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst fn = syncFns[keys[i]];\n\t\tif (isFunction(fn)) {\n\t\t\tconst change = opt_changes && opt_changes[keys[i]];\n\t\t\tconst manager = component.getDataManager();\n\t\t\tfn.call(\n\t\t\t\tcomponent,\n\t\t\t\tchange ? change.newVal : manager.get(component, keys[i]),\n\t\t\t\tchange ? change.prevVal : undefined\n\t\t\t);\n\t\t}\n\t}\n}\n"]}