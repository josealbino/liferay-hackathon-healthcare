{"version":3,"sources":["ComponentRenderer.js"],"names":["ComponentRenderer","component","element","document","createElement","informRendered"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAIMA,iB;;;;;;;6BAMK,CAAE;;;wCASS,CAAE;;;0BAOhBC,S,EAAW;AACjB,QAAI,CAACA,UAAUC,OAAf,EAAwB;AACvBD,eAAUC,OAAV,GAAoBC,SAASC,aAAT,CAAuB,KAAvB,CAApB;AACA;AACDH,cAAUI,cAAV;AACA;;;2BAOO,CAAE;;;4BAYD,CAAE;;;;;;mBAGG,IAAIL,iBAAJ,E","file":"ComponentRenderer.js","sourcesContent":["'use strict';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer {\n\n\t/**\n\t * Disposes of any data specific to the given component.\n\t * @param {!Component} component\n\t */\n\tdispose() {}\n\n\t/**\n\t * Returns extra configuration for data that should be added to the manager.\n\t * Sub classes can override to return `State` config for properties that\n\t * should be added to the component.\n\t * @param {!Component} component\n\t * @return {Object}\n\t */\n\tgetExtraDataConfig() {}\n\n\t/**\n\t * Renders the whole content (including its main element) and informs the\n\t * component about it. Should be overridden by sub classes.\n\t * @param {!Component} component\n\t */\n\trender(component) {\n\t\tif (!component.element) {\n\t\t\tcomponent.element = document.createElement('div');\n\t\t}\n\t\tcomponent.informRendered();\n\t}\n\n\t/**\n\t * Sets up this component to be used by this renderer. Sub classes should\n\t * override as needed for more behavior.\n\t * @param {!Component} component\n\t */\n\tsetUp() {}\n\n\t/**\n\t * Updates the component's element html. This is automatically called when\n\t * the value of at least one of the component's state keys has changed.\n\t * Should be implemented by sub classes. Sub classes have to remember to call\n\t * \"informRendered\" on the component when any update rendering is done.\n\t * @param {!Component} component\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default new ComponentRenderer();\n"]}