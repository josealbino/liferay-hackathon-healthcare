{"version":3,"sources":["Config.js"],"names":["Config","any","setPrimitiveValidators","array","arrayOf","setNestedValidators","bool","func","instanceOf","setExplicitValueValidators","number","object","objectOf","oneOf","oneOfType","validatorArray","map","configObj","config","validator","shapeOf","shapeObj","destructShapeOfConfigs","string","internal","mergeConfig","required","setter","value","valueFn","shape","keys","Object","retShape","forEach","key","context","obj","create","mixin","name","arg"],"mappings":"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","file":"Config.js","sourcesContent":["'use strict';\n\nimport { object } from 'metal';\nimport validators from './validators';\n\n/**\n * Sugar api that can be used as an alternative for manually building `State`\n * configuration in the expected format. For example, instead of having\n * something like this:\n *\n * ```js\n * MyClass.STATE = {\n *   foo: {\n *     required: true,\n *     validator: validators.number,\n *     value: 13\n *   }\n * };\n * ```\n *\n * You could instead do:\n *\n * ```js\n * MyClass.STATE = {\n *   foo: Config.required().number().value(13)\n * };\n * ```\n */\nconst Config = {\n\t/**\n\t* An object that contains a validator function.\n\t* @typedef {!Object} ConfigWithValidator\n\t*/\n\n\t/**\n\t * Function that creates `State` object with an `any` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tany: setPrimitiveValidators('any'),\n\n\t/**\n\t * Function that creates `State` object with an `array` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tarray: setPrimitiveValidators('array'),\n\n\t/**\n\t * Function that creates `State` object with an `arrayOf` validator.\n\t * @param {ConfigWithValidator} stateConfig `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tarrayOf: setNestedValidators('arrayOf'),\n\n\t/**\n\t * Function that creates `State` object with a `bool` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tbool: setPrimitiveValidators('bool'),\n\n\t/**\n\t * Function that creates `State` object with a `func` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tfunc: setPrimitiveValidators('func'),\n\n\t/**\n\t * Function that creates `State` object with an `instanceOf` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tinstanceOf: setExplicitValueValidators('instanceOf'),\n\n\t/**\n\t * Function that creates `State` object with a `number` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tnumber: setPrimitiveValidators('number'),\n\n\t/**\n\t * Function that creates `State` object with an `object` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tobject: setPrimitiveValidators('object'),\n\n\t/**\n\t * Function that creates `State` object with an `objectOf` validator.\n\t * @param {ConfigWithValidator} stateConfig `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tobjectOf: setNestedValidators('objectOf'),\n\n\t/**\n\t * Function that creates `State` object with an `oneOf` validator.\n\t * @param {!Array} values `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\toneOf: setExplicitValueValidators('oneOf'),\n\n\t/**\n\t * Creates `State` configuration object with an `oneOfType` validator.\n\t * @param {ConfigWithValidator[]} validatorArray Array of `State` configuration objects.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\toneOfType(validatorArray) {\n\t\tvalidatorArray = validatorArray.map(\n\t\t\tconfigObj => configObj.config.validator\n\t\t);\n\n\t\treturn this.validator(validators.oneOfType(validatorArray));\n\t},\n\n\t/**\n\t * Creates `State` configuration object with a `shapeOf` validator.\n\t * @param {!Object.<string, ConfigWithValidator>} shapeObj Values being `State` configuration objects.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tshapeOf(shapeObj) {\n\t\tshapeObj = destructShapeOfConfigs(shapeObj);\n\n\t\treturn this.validator(validators.shapeOf(shapeObj));\n\t},\n\n\t/**\n\t * Function that creates `State` object with an `string` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tstring: setPrimitiveValidators('string'),\n\n\t/**\n\t * Adds the `internal` flag to the `State` configuration.\n\t * @param {boolean} required Flag to set \"internal\" to. True by default.\n\t * @return {!Object} `State` configuration object.\n\t */\n\tinternal(internal = true) {\n\t\treturn mergeConfig(this, {\n\t\t\tinternal\n\t\t});\n\t},\n\n\t/**\n\t * Adds the `required` flag to the `State` configuration.\n\t * @param {boolean} required Flag to set \"required\" to. True by default.\n\t * @return {!Object} `State` configuration object.\n\t */\n\trequired(required = true) {\n\t\treturn mergeConfig(this, {\n\t\t\trequired\n\t\t});\n\t},\n\n\t/**\n\t * Adds a setter to the `State` configuration.\n\t * @param {!function()} setter\n\t * @return {!Object} `State` configuration object.\n\t */\n\tsetter(setter) {\n\t\treturn mergeConfig(this, {\n\t\t\tsetter\n\t\t});\n\t},\n\n\t/**\n\t * Adds a validator to the `State` configuration.\n\t * @param {!function()} validator\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalidator(validator) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalidator\n\t\t});\n\t},\n\n\t/**\n\t * Adds a default value to the `State` configuration.\n\t * @param {*} value\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalue(value) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalue\n\t\t});\n\t},\n\n\t/**\n\t * Adds a valueFn that will return a default value for the `State` configuration.\n\t * @param {!function()} valueFn\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalueFn(valueFn) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalueFn\n\t\t});\n\t}\n};\n\n/**\n * Recursively sets validators for shapeOf.\n * @param {!Object} shape The shape of specific types.\n * @return {!Object} Shape object with validators as values.\n */\nfunction destructShapeOfConfigs(shape) {\n\tconst keys = Object.keys(shape);\n\n\tconst retShape = {};\n\n\tkeys.forEach(\n\t\tkey => {\n\t\t\tconst value = shape[key];\n\n\t\t\tretShape[key] = value.config && value.config.validator ? value.config.validator : destructShapeOfConfigs(value);\n\t\t}\n\t);\n\n\treturn retShape;\n}\n\n/**\n * Merges the given config object into the one that has been built so far.\n * @param {!Object} context The object calling this function.\n * @param {!Object} config The object to merge to the built config.\n * @return {!Object} The final object containing the built config.\n */\nfunction mergeConfig(context, config) {\n\tlet obj = context;\n\tif (obj === Config) {\n\t\tobj = Object.create(Config);\n\t\tobj.config = {};\n\t}\n\tobject.mixin(obj.config, config);\n\treturn obj;\n}\n\n/**\n* Calls validators with provided argument.\n* @param {string} name The name of the validator.\n* @param {!function()}\n*/\nfunction setExplicitValueValidators(name) {\n\treturn function(arg) {\n\t\treturn this.validator(validators[name](arg));\n\t};\n}\n\n/**\n* Calls validators with a single nested config.\n* @param {string} name The name of the validator.\n* @return {!function()}\n*/\nfunction setNestedValidators(name) {\n\treturn function(arg) {\n\t\treturn this.validator(validators[name](arg.config.validator));\n\t};\n}\n\n/**\n* Adds primitive type validators to the config object.\n* @param {string} name The name of the validator.\n* @return {!function()}\n*/\nfunction setPrimitiveValidators(name) {\n\treturn function() {\n\t\treturn this.validator(validators[name]);\n\t};\n}\n\nexport default Config;\n"]}