{"version":3,"sources":["attributes.js"],"names":["applyAttribute","convertListenerNamesToFns","HANDLE_SUFFIX","LISTENER_REGEX","component","element","name","value","eventName","getEventFromListenerAttr_","attachEvent_","fixCheckedAttr_","setValueAttrAsProperty_","setBooleanAttr_","attr","fn","handleKey","removeListener","document","config","keys","Object","i","length","key","convertListenerNameToFn_","matches","exec","toLowerCase","setAttribute","removeAttribute"],"mappings":"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","file":"attributes.js","sourcesContent":["'use strict';\n\nimport { isServerSide } from 'metal';\nimport { delegate } from 'metal-dom';\nimport { getComponentFn } from 'metal-component';\nimport { getOriginalFn } from '../incremental-dom-aop';\nimport { isBoolean, isDefAndNotNull, isString } from 'metal';\n\nconst HANDLE_SUFFIX = '__handle__';\nconst LISTENER_REGEX = /^(?:on([A-Z].+))|(?:data-on(.+))$/;\n\n/**\n * Applies an attribute to a specified element owned by the given component.\n * @param {!Component} component\n * @param {!Element} element\n * @param {string} name\n * @param {*} value\n */\nexport function applyAttribute(component, element, name, value) {\n\tconst eventName = getEventFromListenerAttr_(name);\n\tif (eventName) {\n\t\tattachEvent_(component, element, name, eventName, value);\n\t\treturn;\n\t}\n\n\tvalue = fixCheckedAttr_(name, value);\n\tsetValueAttrAsProperty_(element, name, value);\n\n\tif (isBoolean(value)) {\n\t\tsetBooleanAttr_(element, name, value);\n\t} else {\n\t\tgetOriginalFn('attributes')(element, name, value);\n\t}\n}\n\n/**\n * Listens to the specified event, attached via incremental dom calls.\n * @param {!Component} component\n * @param {!Element} element\n * @param {string} attr\n * @param {string} eventName\n * @param {function()} fn\n * @private\n */\nfunction attachEvent_(component, element, attr, eventName, fn) {\n\tif (isServerSide()) {\n\t\treturn;\n\t}\n\tconst handleKey = eventName + HANDLE_SUFFIX;\n\tif (element[handleKey]) {\n\t\telement[handleKey].removeListener();\n\t\telement[handleKey] = null;\n\t}\n\tif (fn) {\n\t\telement[attr] = fn;\n\t\telement[handleKey] = delegate(document, eventName, element, fn);\n\t}\n}\n\n/**\n * Converts all event listener attributes given as function names to actual\n * function references. It's important to do this before calling the real\n * incremental dom `elementOpen` function, otherwise if a component passes\n * the same function name that an element was already using for another\n * component, that event won't be reattached as incremental dom will think that\n * the value hasn't changed. Passing the function references as the value will\n * guarantee that different functions will cause events to be reattached,\n * regardless of their original names.\n * @param {!Component} component\n * @param {!Object} config\n */\nexport function convertListenerNamesToFns(component, config) {\n\tconst keys = Object.keys(config);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key = keys[i];\n\t\tconfig[key] = convertListenerNameToFn_(component, key, config[key]);\n\t}\n}\n\n/**\n * Converts the given attribute's value to a function reference, if it's\n * currently a listener name. It also register the listener name for\n * further usage.\n * @param {!Component} component\n * @param {string} name\n * @param {*} value\n * @return {*}\n * @private\n */\nfunction convertListenerNameToFn_(component, name, value) {\n\tif (isString(value)) {\n\t\tconst eventName = getEventFromListenerAttr_(name);\n\t\tif (eventName) {\n\t\t\tconst fn = getComponentFn(component, value);\n\t\t\tif (fn) {\n\t\t\t\treturn fn;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n}\n\n/**\n * Changes the value of the `checked` attribute to be a boolean.\n * NOTE: This is a temporary fix to account for incremental dom setting\n * \"checked\" as an attribute only, which can cause bugs since that won't\n * necessarily check/uncheck the element it's set on. See\n * https://github.com/google/incremental-dom/issues/198 for more details.\n * @param {string} name\n * @param {*} value\n * @return {*}\n * @private\n */\nfunction fixCheckedAttr_(name, value) {\n\tif (name === 'checked') {\n\t\tvalue = isDefAndNotNull(value) && value !== false;\n\t}\n\treturn value;\n}\n\n/**\n * Returns the event name if the given attribute is a listener (matching the\n * `LISTENER_REGEX` regex), or null if it isn't.\n * @param {string} attr\n * @return {?string}\n * @private\n */\nfunction getEventFromListenerAttr_(attr) {\n\tconst matches = LISTENER_REGEX.exec(attr);\n\tconst eventName = matches ? (matches[1] ? matches[1] : matches[2]) : null;\n\treturn eventName ? eventName.toLowerCase() : null;\n}\n\n/**\n * Sets boolean attributes manually. This is done because incremental dom sets\n * boolean values as string data attributes by default, which is counter\n * intuitive. This changes the behavior to use the actual boolean value.\n * @param {!Element} element\n * @param {string} name\n * @param {*} value\n * @private\n */\nfunction setBooleanAttr_(element, name, value) {\n\tif (isServerSide()) {\n\t\treturn;\n\t}\n\telement[name] = value;\n\tif (value) {\n\t\telement.setAttribute(name, '');\n\t} else {\n\t\telement.removeAttribute(name);\n\t}\n}\n\n/**\n * Sets the value of the `value` attribute directly in the element.\n * NOTE: This is a temporary fix to account for incremental dom setting \"value\"\n * as an attribute only, which can cause bugs since that won't necessarily\n * update the input's content it's set on. See\n * https://github.com/google/incremental-dom/issues/239 for more details. We\n * only do this if the new value is different though, as otherwise the browser\n * will automatically move the typing cursor to the end of the field.\n * @param {!Element} element\n * @param {string} name\n * @param {*} value\n * @private\n */\nfunction setValueAttrAsProperty_(element, name, value) {\n\tif (isServerSide()) {\n\t\treturn;\n\t}\n\tif (name === 'value' && element.value !== value) {\n\t\telement[name] = value;\n\t}\n}\n"]}