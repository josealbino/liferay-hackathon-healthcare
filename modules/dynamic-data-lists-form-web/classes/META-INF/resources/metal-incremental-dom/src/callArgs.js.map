{"version":3,"sources":["callArgs.js"],"names":["buildConfigFromCall","buildCallFromConfig","args","config","key","attrsArr","concat","slice","i","length","tag","call","keys","Object","push"],"mappings":";AAAA;;AAEA;;;;;;;;;;SAMgBA,mB,GAAAA,mB;SAkBAC,mB,GAAAA,mB;AAlBT,UAASD,mBAAT,CAA6BE,IAA7B,EAAmC;AACzC,MAAMC,SAAS,EAAf;AACA,MAAID,KAAK,CAAL,CAAJ,EAAa;AACZC,UAAOC,GAAP,GAAaF,KAAK,CAAL,CAAb;AACA;AACD,MAAMG,WAAW,CAACH,KAAK,CAAL,KAAW,EAAZ,EAAgBI,MAAhB,CAAuBJ,KAAKK,KAAL,CAAW,CAAX,CAAvB,CAAjB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,SAASI,MAA7B,EAAqCD,KAAK,CAA1C,EAA6C;AAC5CL,UAAOE,SAASG,CAAT,CAAP,IAAsBH,SAASG,IAAI,CAAb,CAAtB;AACA;AACD,SAAOL,MAAP;AACA;;AAED;;;;;;AAMO,UAASF,mBAAT,CAA6BS,GAA7B,EAAkCP,MAAlC,EAA0C;AAChD,MAAMQ,OAAO,CAACD,GAAD,EAAMP,OAAOC,GAAb,EAAkB,EAAlB,CAAb;AACA,MAAMQ,OAAOC,OAAOD,IAAP,CAAYT,MAAZ,CAAb;AACA,OAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAII,KAAKH,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,OAAII,KAAKJ,CAAL,MAAY,UAAZ,IAA0BI,KAAKJ,CAAL,MAAY,KAA1C,EAAiD;AAChDG,SAAKG,IAAL,CAAUF,KAAKJ,CAAL,CAAV,EAAmBL,OAAOS,KAAKJ,CAAL,CAAP,CAAnB;AACA;AACD;AACD,SAAOG,IAAP;AACA","file":"callArgs.js","sourcesContent":["'use strict';\n\n/**\n * Builds the component config object from its incremental dom call's\n * arguments.\n * @param {!Array} args\n * @return {!Object}\n */\nexport function buildConfigFromCall(args) {\n\tconst config = {};\n\tif (args[1]) {\n\t\tconfig.key = args[1];\n\t}\n\tconst attrsArr = (args[2] || []).concat(args.slice(3));\n\tfor (let i = 0; i < attrsArr.length; i += 2) {\n\t\tconfig[attrsArr[i]] = attrsArr[i + 1];\n\t}\n\treturn config;\n}\n\n/**\n * Builds an incremental dom call array from the given tag and config object.\n * @param {string} tag\n * @param {!Object} config\n * @return {!Array}\n */\nexport function buildCallFromConfig(tag, config) {\n\tconst call = [tag, config.key, []];\n\tconst keys = Object.keys(config);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tif (keys[i] !== 'children' && keys[i] !== 'key') {\n\t\t\tcall.push(keys[i], config[keys[i]]);\n\t\t}\n\t}\n\treturn call;\n}\n"]}