{"version":3,"sources":["DomEventHandle.js"],"names":["DomEventHandle","emitter","event","listener","opt_capture","capture_","emitter_","removeEventListener","event_","listener_"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KASMA,c;;;AACL;;;;;;;;;AASA,0BAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,WAAtC,EAAmD;AAAA;;AAAA,+HAC5CH,OAD4C,EACnCC,KADmC,EAC5BC,QAD4B;;AAElD,SAAKE,QAAL,GAAgBD,WAAhB;AAFkD;AAGlD;;AAED;;;;;;;oCAGiB;AAChB,SAAKE,QAAL,CAAcC,mBAAd,CAAkC,KAAKC,MAAvC,EAA+C,KAAKC,SAApD,EAA+D,KAAKJ,QAApE;AACA;;;;;;mBAGaL,c","file":"DomEventHandle.js","sourcesContent":["'use strict';\n\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} opt_capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = opt_capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(this.event_, this.listener_, this.capture_);\n\t}\n}\n\nexport default DomEventHandle;\n"]}