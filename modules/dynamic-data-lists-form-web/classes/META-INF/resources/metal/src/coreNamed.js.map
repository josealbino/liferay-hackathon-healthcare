{"version":3,"sources":["coreNamed.js"],"names":["abstractMethod","disableCompatibilityMode","enableCompatibilityMode","getCompatibilityModeData","getFunctionName","getStaticProperty","getUid","identityFunction","isBoolean","isDef","isDefAndNotNull","isDocument","isDocumentFragment","isElement","isFunction","isNull","isNumber","isWindow","isObject","isPromise","isString","isServerSide","nullFunction","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","Error","undefined","opt_data","window","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","fn","name","str","toString","substring","indexOf","ctor","propertyName","opt_mergeFn","mergedName","hasOwnProperty","merged","__proto__","isPrototypeOf","Function","mergeFn","opt_object","opt_noInheritance","id","opt_returnValue","val","nodeType","type","then","String","process","env","NODE_ENV","browser"],"mappings":"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","file":"coreNamed.js","sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${((Math.random() * 1e9) >>> 0)}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} opt_mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n */\nexport function getStaticProperty(ctor, propertyName, opt_mergeFn) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\tlet merged = ctor.hasOwnProperty(propertyName) ? ctor[propertyName] : null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconst mergeFn = opt_mergeFn || getFirstTruthy_;\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tlet id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Sets to true if running inside Node.js environment with extra check for\n * `process.browser` to skip Karma runner environment. Karma environment has\n * `process` defined even though it runs on the browser.\n * @return {boolean}\n */\nexport function isServerSide() {\n\treturn typeof process !== 'undefined' &&\n\t\ttypeof process.env !== 'undefined' &&\n\t\tprocess.env.NODE_ENV !== 'test' &&\n\t\t!process.browser;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {\n}\n"]}