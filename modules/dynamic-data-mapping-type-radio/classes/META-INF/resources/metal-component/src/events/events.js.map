{"version":3,"sources":["events.js"],"names":["addListenersFromObj","getComponentFn","component","events","eventNames","Object","keys","handles","i","length","info","extractListenerInfo_","fn","handle","selector","delegate","on","push","value","fnName","bind","console","error","constructor"],"mappings":";AAAA;;;;;SAUgBA,mB,GAAAA,mB;SA8CAC,c,GAAAA,c;;;AApDhB;;;;;;AAMO,UAASD,mBAAT,CAA6BE,SAA7B,EAAwCC,MAAxC,EAAgD;AACtD,MAAMC,aAAaC,OAAOC,IAAP,CAAYH,UAAU,EAAtB,CAAnB;AACA,MAAMI,UAAU,EAAhB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,WAAWK,MAA/B,EAAuCD,GAAvC,EAA4C;AAC3C,OAAME,OAAOC,qBAAqBT,SAArB,EAAgCC,OAAOC,WAAWI,CAAX,CAAP,CAAhC,CAAb;AACA,OAAIE,KAAKE,EAAT,EAAa;AACZ,QAAIC,eAAJ;AACA,QAAIH,KAAKI,QAAT,EAAmB;AAClBD,cAASX,UAAUa,QAAV,CAAmBX,WAAWI,CAAX,CAAnB,EAAkCE,KAAKI,QAAvC,EAAiDJ,KAAKE,EAAtD,CAAT;AACA,KAFD,MAEO;AACNC,cAASX,UAAUc,EAAV,CAAaZ,WAAWI,CAAX,CAAb,EAA4BE,KAAKE,EAAjC,CAAT;AACA;AACDL,YAAQU,IAAR,CAAaJ,MAAb;AACA;AACD;AACD,SAAON,OAAP;AACA;;AAED;;;;;;;;AAQA,UAASI,oBAAT,CAA8BT,SAA9B,EAAyCgB,KAAzC,EAAgD;AAC/C,MAAMR,OAAO;AACZE,OAAIM;AADQ,GAAb;AAGA,MAAI,qBAASA,KAAT,KAAmB,CAAC,uBAAWA,KAAX,CAAxB,EAA2C;AAC1CR,QAAKI,QAAL,GAAgBI,MAAMJ,QAAtB;AACAJ,QAAKE,EAAL,GAAUM,MAAMN,EAAhB;AACA;AACD,MAAI,qBAASF,KAAKE,EAAd,CAAJ,EAAuB;AACtBF,QAAKE,EAAL,GAAUX,eAAeC,SAAf,EAA0BQ,KAAKE,EAA/B,CAAV;AACA;AACD,SAAOF,IAAP;AACA;;AAED;;;;;;AAMO,UAAST,cAAT,CAAwBC,SAAxB,EAAmCiB,MAAnC,EAA2C;AACjD,MAAI,uBAAWjB,UAAUiB,MAAV,CAAX,CAAJ,EAAmC;AAClC,UAAOjB,UAAUiB,MAAV,EAAkBC,IAAlB,CAAuBlB,SAAvB,CAAP;AACA,GAFD,MAEO;AACNmB,WAAQC,KAAR,wBAAmCH,MAAnC,4CACI,4BAAgBjB,UAAUqB,WAA1B,CADJ;AAIA;AACD","file":"events.js","sourcesContent":["'use strict';\n\nimport { getFunctionName, isFunction, isObject, isString } from 'metal';\n\n/**\n * Adds the listeners specified in the given object.\n * @param {!Component} component\n * @param {Object} events\n * @return {!Array<!EventHandle>} Handles from all subscribed events.\n */\nexport function addListenersFromObj(component, events) {\n\tconst eventNames = Object.keys(events || {});\n\tconst handles = [];\n\tfor (let i = 0; i < eventNames.length; i++) {\n\t\tconst info = extractListenerInfo_(component, events[eventNames[i]]);\n\t\tif (info.fn) {\n\t\t\tlet handle;\n\t\t\tif (info.selector) {\n\t\t\t\thandle = component.delegate(eventNames[i], info.selector, info.fn);\n\t\t\t} else {\n\t\t\t\thandle = component.on(eventNames[i], info.fn);\n\t\t\t}\n\t\t\thandles.push(handle);\n\t\t}\n\t}\n\treturn handles;\n}\n\n/**\n * Extracts listener info from the given value.\n * @param {!Component} component\n * @param {!Component} component\n * @param {function()|string|{selector:string,fn:function()|string}} value\n * @return {!{selector:string,fn:function()}}\n * @protected\n */\nfunction extractListenerInfo_(component, value) {\n\tconst info = {\n\t\tfn: value\n\t};\n\tif (isObject(value) && !isFunction(value)) {\n\t\tinfo.selector = value.selector;\n\t\tinfo.fn = value.fn;\n\t}\n\tif (isString(info.fn)) {\n\t\tinfo.fn = getComponentFn(component, info.fn);\n\t}\n\treturn info;\n}\n\n/**\n * Gets the listener function from its name. Throws an error if none exist.\n * @param {!Component} component\n * @param {string} fnName\n * @return {function()}\n */\nexport function getComponentFn(component, fnName) {\n\tif (isFunction(component[fnName])) {\n\t\treturn component[fnName].bind(component);\n\t} else {\n\t\tconsole.error(`No function named ${fnName} was found in the component\n\t\t\t\"${getFunctionName(component.constructor)}\". Make sure that you specify\n\t\t\tvalid function names when adding inline listeners`\n\t\t);\n\t}\n}\n"]}