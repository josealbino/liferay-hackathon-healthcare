{"version":3,"sources":["ComponentDataManager.js"],"names":["BLACKLIST","components","context","element","refs","state","stateKey","wasRendered","DATA_MANAGER_DATA","ComponentDataManager","component","data","getInitialConfig","setKeysBlacklist","configState","mixin","getStateStatic","constructor","getManagerData","state_","dispose","name","get","getStateKeys","getState","opt_state","keys","i","length","key","getStateKeyConfig","internal","hasOwnProperty","set","setDefaultValue","opt_callback","setState","createState_"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,KAAMA,YAAY;AACjBC,cAAY,IADK;AAEjBC,WAAS,IAFQ;AAGjBC,WAAS,IAHQ;AAIjBC,QAAM,IAJW;AAKjBC,SAAO,IALU;AAMjBC,YAAU,IANO;AAOjBC,eAAa;AAPI,EAAlB;AASA,KAAMC,oBAAoB,uBAA1B;;KAEMC,oB;;;;;;;gCAOQC,S,EAAWC,I,EAAM;AAC7B,QAAMN,QAAQ,oBAAUK,UAAUE,gBAAV,EAAV,EAAwCF,SAAxC,EAAmDA,SAAnD,CAAd;AACAL,UAAMQ,gBAAN,CAAuBb,SAAvB;AACAK,UAAMS,WAAN,CACC,cAAOC,KAAP,CAAa,EAAb,EAAiBJ,IAAjB,EAAuB,gBAAMK,cAAN,CAAqBN,UAAUO,WAA/B,CAAvB,CADD;AAGA,SAAKC,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,GAAwCd,KAAxC;AACA;;;2BAMOK,S,EAAW;AAClB,QAAMC,OAAO,KAAKO,cAAL,CAAoBR,SAApB,CAAb;AACA,QAAIC,KAAKQ,MAAT,EAAiB;AAChBR,UAAKQ,MAAL,CAAYC,OAAZ;AACA;AACDV,cAAUF,iBAAV,IAA+B,IAA/B;AACA;;;uBAQGE,S,EAAWW,I,EAAM;AACpB,WAAO,KAAKH,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,CAAsCG,GAAtC,CAA0CD,IAA1C,CAAP;AACA;;;kCAOcX,S,EAAW;AACzB,WAAOA,UAAUF,iBAAV,CAAP;AACA;;;+BAOWE,S,EAAW;AACtB,WAAO,KAAKQ,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,CAAsCI,YAAtC,EAAP;AACA;;;gCAOYb,S,EAAW;AACvB,WAAO,KAAKQ,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,CAAsCI,YAAtC,EAAP;AACA;;;4BAOQb,S,EAAW;AACnB,WAAO,KAAKQ,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,CAAsCK,QAAtC,EAAP;AACA;;;oCAOgBd,S,EAAW;AAC3B,WAAO,KAAKQ,cAAL,CAAoBR,SAApB,EAA+BS,MAAtC;AACA;;;sCASkBT,S,EAAWC,I,EAAMc,S,EAAW;AAC9C,QAAMpB,QAAQoB,aAAa,KAAKP,cAAL,CAAoBR,SAApB,EAA+BS,MAA1D;AACA,QAAMO,OAAOrB,MAAMkB,YAAN,EAAb;AACA,SAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,SAAME,MAAMH,KAAKC,CAAL,CAAZ;AACA,SAAI,CAACtB,MAAMyB,iBAAN,CAAwBD,GAAxB,EAA6BE,QAAlC,EAA4C;AAC3C,UAAIpB,KAAKqB,cAAL,CAAoBH,GAApB,CAAJ,EAA8B;AAC7BxB,aAAM4B,GAAN,CAAUJ,GAAV,EAAelB,KAAKkB,GAAL,CAAf;AACA,OAFD,MAEO;AACNxB,aAAM6B,eAAN,CAAsBL,GAAtB;AACA;AACD;AACD;AACD;;;4BAUQnB,S,EAAWL,K,EAAO8B,Y,EAAc;AACxC,SAAKjB,cAAL,CAAoBR,SAApB,EAA+BS,MAA/B,CAAsCiB,QAAtC,CAA+C/B,KAA/C,EAAsD8B,YAAtD;AACA;;;yBAOKzB,S,EAAWC,I,EAAM;AACtBD,cAAUF,iBAAV,IAA+B,EAA/B;AACA,SAAK6B,YAAL,CAAkB3B,SAAlB,EAA6BC,IAA7B;AACA;;;;;;mBAGa,IAAIF,oBAAJ,E","file":"ComponentDataManager.js","sourcesContent":["'use strict';\n\nimport { object } from 'metal';\nimport State from 'metal-state';\n\nconst BLACKLIST = {\n\tcomponents: true,\n\tcontext: true,\n\telement: true,\n\trefs: true,\n\tstate: true,\n\tstateKey: true,\n\twasRendered: true\n};\nconst DATA_MANAGER_DATA = '__DATA_MANAGER_DATA__';\n\nclass ComponentDataManager {\n\t/**\n\t * Creates the `State` instance that will handle the main component data.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tcreateState_(component, data) {\n\t\tconst state = new State(component.getInitialConfig(), component, component);\n\t\tstate.setKeysBlacklist(BLACKLIST);\n\t\tstate.configState(\n\t\t\tobject.mixin({}, data, State.getStateStatic(component.constructor))\n\t\t);\n\t\tthis.getManagerData(component).state_ = state;\n\t}\n\n\t/**\n\t * Disposes of any data being used by the manager in this component.\n\t * @param {!Component} component\n\t */\n\tdispose(component) {\n\t\tconst data = this.getManagerData(component);\n\t\tif (data.state_) {\n\t\t\tdata.state_.dispose();\n\t\t}\n\t\tcomponent[DATA_MANAGER_DATA] = null;\n\t}\n\n\t/**\n\t * Gets the data with the given name.\n\t * @param {!Component} component\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(component, name) {\n\t\treturn this.getManagerData(component).state_.get(name);\n\t}\n\n\t/**\n\t * Gets the manager data for the given component.\n\t * @param {!Component} component\n\t * @return {Object}\n\t */\n\tgetManagerData(component) {\n\t\treturn component[DATA_MANAGER_DATA];\n\t}\n\n\t/**\n\t * Gets the keys for state data that can be synced via `sync` functions.\n\t * @param {!Component} component\n\t * @return {!Array<string>}\n\t */\n\tgetSyncKeys(component) {\n\t\treturn this.getManagerData(component).state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the keys for state data.\n\t * @param {!Component} component\n\t * @return {!Array<string>}\n\t */\n\tgetStateKeys(component) {\n\t\treturn this.getManagerData(component).state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the whole state data.\n\t * @param {!Component} component\n\t * @return {!Object}\n\t */\n\tgetState(component) {\n\t\treturn this.getManagerData(component).state_.getState();\n\t}\n\n\t/**\n\t * Gets the `State` instance being used.\n\t * @param {!Component} component\n\t * @return {!Object}\n\t */\n\tgetStateInstance(component) {\n\t\treturn this.getManagerData(component).state_;\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t * @param {State=} opt_state\n\t */\n\treplaceNonInternal(component, data, opt_state) {\n\t\tconst state = opt_state || this.getManagerData(component).state_;\n\t\tconst keys = state.getStateKeys();\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\tif (!state.getStateKeyConfig(key).internal) {\n\t\t\t\tif (data.hasOwnProperty(key)) {\n\t\t\t\t\tstate.set(key, data[key]);\n\t\t\t\t} else {\n\t\t\t\t\tstate.setDefaultValue(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Component} component\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(component, state, opt_callback) {\n\t\tthis.getManagerData(component).state_.setState(state, opt_callback);\n\t}\n\n\t/**\n\t * Sets up the specified component's data.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t */\n\tsetUp(component, data) {\n\t\tcomponent[DATA_MANAGER_DATA] = {};\n\t\tthis.createState_(component, data);\n\t}\n}\n\nexport default new ComponentDataManager();\n"]}