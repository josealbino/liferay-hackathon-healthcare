{"version":3,"sources":["EventHandler.js"],"names":["EventHandler","eventHandles_","i","arguments","length","push","removeListener"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUMA,Y;;;AACL,0BAAc;AAAA;;AAAA;;AAGb;;;;;;AAMA,SAAKC,aAAL,GAAqB,EAArB;AATa;AAUb;;AAED;;;;;;;;;yBAKM;AACL,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,GAAtC,EAA2C;AAC1C,UAAKD,aAAL,CAAmBI,IAAnB,CAAwBF,UAAUD,CAAV,CAAxB;AACA;AACD;;;qCAMiB;AACjB,SAAKD,aAAL,GAAqB,IAArB;AACA;;;wCAKoB;AACpB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKD,aAAL,CAAmBG,MAAvC,EAA+CF,GAA/C,EAAoD;AACnD,UAAKD,aAAL,CAAmBC,CAAnB,EAAsBI,cAAtB;AACA;;AAED,SAAKL,aAAL,GAAqB,EAArB;AACA;;;;;;mBAGaD,Y","file":"EventHandler.js","sourcesContent":["'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd() {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(arguments[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n"]}