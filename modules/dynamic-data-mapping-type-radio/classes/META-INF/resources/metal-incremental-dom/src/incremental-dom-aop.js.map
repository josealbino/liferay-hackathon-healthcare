{"version":3,"sources":["incremental-dom-aop.js"],"names":["getOriginalFns","getOriginalFn","startInterception","stopInterception","originalFns","name","fns","attr","fnAttr","elementOpenEnd","fnOpenEnd","elementOpenStart","fnOpenStart","elementVoid","fnVoid","fnStack","push","pop","IncrementalDOM","attributes","symbols","default","elementClose","elementOpen","text","collectedArgs","value","tag","key","statics","apply","arguments","getStack","length","buildHandleCall","data","fn","handleCall","bind","stack"],"mappings":"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","file":"incremental-dom-aop.js","sourcesContent":["'use strict';\n\nimport './incremental-dom';\n\n/**\n * Gets the original incremental dom functions.\n * @return {!Object}\n */\nexport function getOriginalFns() {\n\treturn originalFns;\n}\n\n/**\n * Gets the original incremental dom function with the given name.\n * @param {string} name\n * @return {!Object}\n */\nexport function getOriginalFn(name) {\n\treturn originalFns[name];\n}\n\n/**\n * Starts intercepting calls to incremental dom, replacing them with the given\n * functions. Note that `elementVoid`, `elementOpenStart`, `elementOpenEnd`\n * and `attr` are the only ones that can't be intercepted, since they'll\n * automatically be converted into equivalent calls to `elementOpen` and\n * `elementClose`.\n * @param {!Object} fns Functions to be called instead of the original ones\n *     from incremental DOM. Should be given as a map from the function name\n *     to the function that should intercept it. All interceptors will receive\n *     the original function as the first argument, the actual arguments from\n *     from the original call following it.\n */\nexport function startInterception(fns) {\n\tfns.attr = fnAttr;\n\tfns.elementOpenEnd = fnOpenEnd;\n\tfns.elementOpenStart = fnOpenStart;\n\tfns.elementVoid = fnVoid;\n\tfnStack.push(fns);\n}\n\n/**\n * Restores the original `elementOpen` function from incremental dom to the\n * implementation it used before the last call to `startInterception`.\n */\nexport function stopInterception() {\n\tfnStack.pop();\n}\n\nconst originalFns = {\n\tattr: IncrementalDOM.attr,\n\tattributes: IncrementalDOM.attributes[IncrementalDOM.symbols.default],\n\telementClose: IncrementalDOM.elementClose,\n\telementOpen: IncrementalDOM.elementOpen,\n\telementOpenEnd: IncrementalDOM.elementOpenEnd,\n\telementOpenStart: IncrementalDOM.elementOpenStart,\n\telementVoid: IncrementalDOM.elementVoid,\n\ttext: IncrementalDOM.text\n};\n\nconst fnStack = [];\n\nlet collectedArgs = [];\n\nfunction fnAttr(name, value) {\n\tcollectedArgs.push(name, value);\n}\n\nfunction fnOpenStart(tag, key, statics) {\n\tcollectedArgs = [tag, key, statics];\n}\n\nfunction fnOpenEnd() {\n\treturn IncrementalDOM.elementOpen(...collectedArgs);\n}\n\nfunction fnVoid() {\n\tIncrementalDOM.elementOpen.apply(null, arguments);\n\treturn IncrementalDOM.elementClose.apply(null, arguments);\n}\n\nfunction getStack() {\n\treturn fnStack.length > 0 ? fnStack[fnStack.length - 1] : null;\n}\n\nfunction buildHandleCall(name) {\n\tconst data = {\n\t\tname\n\t};\n\tconst fn = handleCall.bind(data);\n\treturn fn;\n}\n\nfunction handleCall() {\n\tconst name = this.name; // eslint-disable-line\n\tconst stack = getStack();\n\tconst fn = (stack && stack[name]) || originalFns[name];\n\treturn fn.apply(null, arguments);\n}\n\nIncrementalDOM.attr = buildHandleCall('attr');\nIncrementalDOM.elementClose = buildHandleCall('elementClose');\nIncrementalDOM.elementOpen = buildHandleCall('elementOpen');\nIncrementalDOM.elementOpenEnd = buildHandleCall('elementOpenEnd');\nIncrementalDOM.elementOpenStart = buildHandleCall('elementOpenStart');\nIncrementalDOM.elementVoid = buildHandleCall('elementVoid');\nIncrementalDOM.text = buildHandleCall('text');\n\nIncrementalDOM.attributes[IncrementalDOM.symbols.default] = buildHandleCall(\n\t'attributes'\n);\n"]}