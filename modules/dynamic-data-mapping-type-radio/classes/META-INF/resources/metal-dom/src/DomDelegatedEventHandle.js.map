{"version":3,"sources":["DomDelegatedEventHandle.js"],"names":["DomDelegatedEventHandle","emitter","event","listener","opt_selector","selector_","delegating","get","emitter_","listeners","selector","arr","event_","selectors","key","remove","listener_","length"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWMA,uB;;;AACL;;;;;;;;;AASA,mCAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD;AAAA;;AAAA,iJAC7CH,OAD6C,EACpCC,KADoC,EAC7BC,QAD6B;;AAEnD,SAAKE,SAAL,GAAiBD,YAAjB;AAFmD;AAGnD;;AAED;;;;;;;oCAGiB;AAChB,QAAME,aAAa,kBAAQC,GAAR,CAAY,KAAKC,QAAjB,EAA2B,YAA3B,EAAyC,EAAzC,CAAnB;AACA,QAAMC,YAAY,kBAAQF,GAAR,CAAY,KAAKC,QAAjB,EAA2B,WAA3B,EAAwC,EAAxC,CAAlB;AACA,QAAME,WAAW,KAAKL,SAAtB;AACA,QAAMM,MAAM,qBAASD,QAAT,IAAqBJ,WAAW,KAAKM,MAAhB,EAAwBC,SAA7C,GAAyDJ,SAArE;AACA,QAAMK,MAAM,qBAASJ,QAAT,IAAqBA,QAArB,GAAgC,KAAKE,MAAjD;;AAEA,iBAAMG,MAAN,CAAaJ,IAAIG,GAAJ,KAAY,EAAzB,EAA6B,KAAKE,SAAlC;AACA,QAAIL,IAAIG,GAAJ,KAAYH,IAAIG,GAAJ,EAASG,MAAT,KAAoB,CAApC,EAAuC;AACtC,YAAON,IAAIG,GAAJ,CAAP;AACA;AACD;;;;;;mBAGad,uB","file":"DomDelegatedEventHandle.js","sourcesContent":["'use strict';\n\nimport { array, isString } from 'metal';\nimport domData from './domData';\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom delegated events\n * (only the ones that receive a target element, not a selector string).\n * @extends {EventHandle}\n */\nclass DomDelegatedEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomDelegatedEventHandle`.\n\t * @param {!Event} emitter Element the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {string=} opt_selector An optional selector used when delegating\n\t *     the event.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_selector) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.selector_ = opt_selector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tconst delegating = domData.get(this.emitter_, 'delegating', {});\n\t\tconst listeners = domData.get(this.emitter_, 'listeners', {});\n\t\tconst selector = this.selector_;\n\t\tconst arr = isString(selector) ? delegating[this.event_].selectors : listeners;\n\t\tconst key = isString(selector) ? selector : this.event_;\n\n\t\tarray.remove(arr[key] || [], this.listener_);\n\t\tif (arr[key] && arr[key].length === 0) {\n\t\t\tdelete arr[key];\n\t\t}\n\t}\n}\n\nexport default DomDelegatedEventHandle;\n"]}